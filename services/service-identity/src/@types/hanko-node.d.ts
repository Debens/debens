declare module '@teamhanko/hanko-node' {
    export enum AttestationConveyancePreference {
        /**
         * Indicates that the RP is not interested in authenticator attestation.
         */
        NONE = 'none',
        /**
         *  Indicates that the RP prefers an attestation conveyance yielding verifiable attestation statements, but allows
         *  the client to decide how to obtain such attestation statements.
         */
        INDIRECT = 'indirect',
        /**
         * Indicates that the RP wants to receive the attestation statement as generated by the authenticator.
         */
        DIRECT = 'direct',
    }

    export enum AuthenticatorAttachment {
        /**
         * Indicates that the authenticator should be a platform authenticator.
         */
        PLATFORM = 'platform',
        /**
         * Indicates that the authenticator should be a roaming authenticator.
         */
        CROSS_PLATFORM = 'cross-platform',
    }

    export enum UserVerificationRequirement {
        /**
         * Indicates that user verification is required for the operation. The operation will fail if no user verification is
         * performed.
         */
        REQUIRED = 'required',
        /**
         *  Indicates that the RP prefers user verification for the operation if possible, but will not fail the operation if
         *  no user verification was performed (i.e. if only proof of user presence was provided).
         */
        PREFERRED = 'preferred',
        /**
         *  indicates that the RP does not want user verification employed during the operation (e.g., in the interest of
         *  minimizing disruption to the user interaction flow).
         */
        DISCOURAGED = 'discouraged',
    }

    export interface HankoWebAuthnClientParams {
        apiUrl: string;
        apiSecret: string;
        apiKeyId: string;
    }

    export interface WebAuthnCredential {
        id: string;
        user: {
            id: string;
        };
        createdAt: string;
        lastUsed: string;
        isResidentKey: boolean;
        name: string;
        userVerification: boolean;
        authenticator: {
            aaguid: string;
            name: string;
            attachment: AuthenticatorAttachment;
        };
    }

    export interface RegistrationInitializationRequest {
        user: {
            id: string;
            name?: string;
        };
        options?: {
            authenticatorSelection?: {
                authenticatorAttachment?: AuthenticatorAttachment;
                userVerification?: UserVerificationRequirement;
                requireResidentKey?: boolean;
            };
            attestation: AttestationConveyancePreference;
        };
    }

    export interface CredentialRequestOptions {
        publicKey: {
            challenge: string;
            timeout: number;
            rpID: string;
            allowCredentials: {
                type: string;
                id: string;
                transports: string[];
            }[];
            authenticatorSelection: {
                userVerification: UserVerificationRequirement;
            };
        };
    }

    export interface CredentialCreationOptions {
        publicKey: {
            rp: {
                id: string;
                name: string;
            };
            user: {
                id: string;
                name: string;
                displayName: string;
            };
            challenge: string;
            pubKeyCredParams: PubKeyCredParams[];
            timeout: number;
            excludeCredentials: ExcludeCredentials[];
            authenticatorSelection: {
                AuthenticatorAttachment: AuthenticatorAttachment;
                userVerification: UserVerificationRequirement;
                requireResidentKey: boolean;
            };
            attestation: AttestationConveyancePreference;
        };
    }

    export interface FinalizationResponse {
        credential: WebAuthnCredential;
    }

    export interface AuthenticationInitializationRequest {
        user?: {
            id: string;
        };
        options?: {
            authenticatorAttachment?: AuthenticatorAttachment;
            userVerification?: UserVerificationRequirement;
        };
    }

    export interface PublicKeyCredentialCreate {
        id: string;
        rawId: string;
        type: string;
        response: {
            clientDataJSON: string;
            attestationObject: string;
        };
    }

    export interface PublicKeyCredentialGet {
        id: string;
        rawId: string;
        type: string;
        response: {
            clientDataJSON: string;
            authenticatorData: string;
            signature: string;
            userHandle?: string;
        };
    }

    export class HankoWebAuthnClient {
        constructor(params: HankoWebAuthnClientParams): HankoWebAuthnClient;
        initializeRegistration: (
            params: RegistrationInitializationRequest,
        ) => Promise<CredentialCreationOptions>;
        finalizeRegistration: (params: PublicKeyCredentialCreate) => Promise<FinalizationResponse>;

        initializeAuthentication: (
            params: AuthenticationInitializationRequest,
        ) => Promise<CredentialRequestOptions>;
        finalizeAuthentication: (params: PublicKeyCredentialGet) => Promise<FinalizationResponse>;

        listCredentials(query: { user_id: string }): Promise<unknown>;
    }
}
